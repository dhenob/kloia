name: Docker Build, Scan & Push

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  IMAGE_NAME: sockshop-frontend
  DOCKER_HUB_REPO: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

jobs:
  build-scan-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_REPO }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=long
      
      - name: Build Docker image with local tag
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/front-end/Dockerfile
          push: false
          load: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            sockshop-frontend:scan
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create report directory
        run: mkdir -p reports
      
      - name: Debug Docker images
        run: docker images
      
      - name: Run Trivy vulnerability scanner
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: sockshop-frontend:scan
          format: 'sarif'
          output: 'reports/trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          ignore-unfixed: true
      
      - name: Debug directory contents
        run: |
          echo "Current directory:"
          ls -la
          echo "Reports directory:"
          ls -la reports || echo "Reports directory not found"
          
          # Create a dummy SARIF file if the scan failed
          if [ ! -f "reports/trivy-results.sarif" ]; then
            echo "Creating dummy SARIF file for upload"
            echo '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": []
            }' > reports/trivy-results.sarif
          fi
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'reports/trivy-results.sarif'
          category: 'container-scanning'
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Push Docker image
        id: push
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/front-end/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Trigger GitOps update (CD) by updating the Helm chart values
      - name: Extract image tag
        if: github.event_name != 'pull_request' && steps.push.outcome == 'success'
        id: extract_tag
        run: |
          # Extract short SHA for commit-based tag
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
          
          # Set image tag based on the event type
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG="${{ github.ref_name }}"
          elif [[ "${{ github.ref_name }}" == "main" || "${{ github.ref_name }}" == "master" ]]; then
            TAG="${{ github.ref_name }}"
          else
            TAG="sha-${SHORT_SHA}"
          fi
          
          echo "IMAGE_TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "Using image tag: ${TAG}"
      
      - name: Update Helm values
        if: github.event_name != 'pull_request' && steps.push.outcome == 'success'
        run: |
          # Update the image tag in the values.yaml
          sed -i "s/tag: .*  # This will be updated by the CI\/CD pipeline/tag: ${{ steps.extract_tag.outputs.IMAGE_TAG }}  # This will be updated by the CI\/CD pipeline/" helm-chart/frontend/values.yaml
          
          # Display the updated values file
          cat helm-chart/frontend/values.yaml
      
      - name: Commit changes
        if: github.event_name != 'pull_request' && steps.push.outcome == 'success'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add helm-chart/frontend/values.yaml
          git commit -m "Update image tag to ${{ steps.extract_tag.outputs.IMAGE_TAG }}"
          git push 